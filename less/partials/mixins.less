// ==============================================
// ClearLess default settings
// ----------------------------------------------
// Override on a per-project basis as required.
// ==============================================

// Table of content:
// 1. General
// 2. Typography
// 3. Boxes
// 4. Grid
// 5. Buttons
// 6. Forms
// 7. Z-index
// 8. Horizontal Dividers
// 9. Reset filters for IE
//10. Misc helpers and shortcuts
//11. Gradients
//12. Flexbox LESS mixins
//13. Alerts
//14. Helpers



// ==============================================
// 1.
// General
// ==============================================


@using-ieclasses: true;   // whether or not the markup has html5-boilerplate style IE classes in it or not
@using-modernizr: false;  // whether or not modernizer feature-detection classes are being used
@disable-filters: true;   // whether or not to disable MS-specific 'filter' properties (can make IE slow!)

/*// Typography --------------------------------

@base-font-size: 16;    // base pixel font size. Used as a default for px -> (r)em conversions*/

/*// Sprites --------------------------------

@sprite-image: '/example.png';
@sprite-grid: 50px;*/

/*// Grid --------------------------------

@total-columns: 12;
@column-width: 60px;
@gutter-width: 20px;*/




// ==============================================
// 2.
// Typography related mixins
// ==============================================

.font-size-rems(@px-size){
	@rem-size: @px-size / @base-font-size;
	font-size: ~"@{px-size}px";
	font-size: ~"@{rem-size}rem";
}

.font-size-ems(@target-px-size, @context-px-size:@base-font-size) {
	font-size: (@target-px-size / @context-px-size) * 1em;
}

.font-face( @family-name, @include-svg:false, @font-path) when not (@include-svg) {
	@font-face {
			font-family: @family-name;
			src: url('@{font-path}@{family-name}.eot');
			src: url('@{font-path}@{family-name}.eot?#iefix') format('embedded-opentype'),
					 url('@{font-path}@{family-name}.woff') format('woff'),
					 url('@{font-path}@{family-name}.ttf') format('truetype');
			font-weight: normal;
			font-style: normal;
	}
}

.font-face( @family-name, @include-svg:false, @font-path ) when (@include-svg) {
	@font-face {
			font-family: @family-name;
			src: url('@{font-path}@{family-name}.eot');
			src: url('@{font-path}@{family-name}.eot?#iefix') format('embedded-opentype'),
					 url('@{font-path}@{family-name}.woff') format('woff'),
					 url('@{font-path}@{family-name}.ttf') format('truetype'),
			 url('@{font-path}.svg#@{family-name}') format('svg');
			font-weight: normal;
			font-style: normal;
	}
}

.wrap-words() {
	-ms-word-break: break-all;
	word-break: break-all;
	word-break: break-word;
	-webkit-hyphens: auto;
	-moz-hyphens: auto;
	hyphens: auto;
}

.text-size-adjust(@mode: auto) {
	-webkit-text-size-adjust: @mode;
	-moz-text-size-adjust: @mode;
	-ms-text-size-adjust: @mode;
	-o-text-size-adjust: @mode;
	text-size-adjust: @mode;
}

// @fontsize: defaults to 16 but you can pass in any value you want
// @lineheight defaults to 24 and will change depending on the size of your text. Working out the required line-height should be the only calculation you have to do and it's an easy one as it will always be a multiple of your default line-height and should always be equal to or larger than your font-size. So if your font-size is 12, line-height will be 24; if your font-size is 24, it'll be 24; if your font-size is 36, line-height will be 48; if it's 50, it'll be 72.
// @multiplier is used for larger font-sizes if you want the margin to be larger than a standard 1 line-height's worth which is the default. In most cases, the only value other than 1 you would use would be 2 and only for large headings.
// @lineheightreducer is used for text with a smaller font-size which won't look as good with such a large leading. Instead, use the reducer to bring it down to a more readable level. I've used 1.2 which will mean five lines of smaller text will fit into the space of four lines of normal text. I would tink you'd only need to use it for text sizes around 10px or 11px.

.font(@fontsize:16, @lineheight:24, @multiplier:1, @lineheightreducer:1) {
	font-size: (@fontsize/@defaultfontsize) * 1rem;
	line-height: @lineheight/@fontsize/@lineheightreducer;
	margin: ((@multiplier * @defaultlineheight) / @fontsize) * 1rem 0 0;
}



// ==============================================
// 3.
// Boxes
// ==============================================

// @bordertop and @borderbottom default to 1px and the values that you pass in are pixel values.
// @paddingtop and @paddingbottom also default to 1 but in this case 1 refers to the number of line spaces you want, so in this example, 24 pixels. Fractional values like .5 can be used too (see the demo page), but you can't use 0 because that would result in a negative padding value which is invalid CSS.

.boxes(@paddingtop:1, @paddingbottom:1, @bordertop:0, @borderbottom:0) {
	@border-top-width: @bordertop*1px;
	@border-bottom-width: @borderbottom*1px;
	
	// Conditional boxes, uses escaping and JavaScript evaluation to determine if border-width- declarations should be added to the output.
	padding-top: e(%("%sem%s", (((@paddingtop*@defaultlineheight)-@bordertop)/@defaultfontsize), `@{bordertop}>=1?'; border-top-width: @{border-top-width}':''` ));
	padding-bottom: e(%("%sem%s", (((@paddingbottom*@defaultlineheight)-@borderbottom)/@defaultfontsize)*1, `@{borderbottom}>=1?'; border-bottom-width: @{border-bottom-width}':''` ));
}



// ==============================================
// 4.
// Grid mixins
// ==============================================

// Centered container element
.container() {
  margin: 0 auto;
  padding: 0;
  &:extend(.clearfix all);
}

.row ( @width : @default-width; @padding: @default-padding; @margin: @default-row_margin; ) {
	max-width: @width;
	width: 100%;
	margin: @margin;
	padding: @padding;
	
	// clear at the end of container
	&:before,
	&:after {
		content:"";
		display:table;
	}
	&:after {
		clear:both;
	}
}

.cols ( @colspan : @default-colspan; @total_cols : @default-total_cols; @padding: @default-padding; @gutter: @default-gutter; @edge: false; @margin_top : @default-margin_top; @margin_bottom : @default-margin_bottom; ){
	@total_gutter: (@total_cols - 1) * @gutter;
	@spanned_gutters: (@colspan - 1) * @gutter;
	width: ( @colspan * ( (100 - @total_gutter) / @total_cols) ) + @spanned_gutters + 0%;
	float: left;
	padding: @padding;
	.if-edge (@edge; @gutter; @margin_top; @margin_bottom; );
}

.if-edge ( @edge; @gutter; @margin_top; @margin_bottom;  ) when (@edge = false) {
	margin: @margin_top @gutter + 0% @margin_bottom 0;
}

.if-edge ( @edge; @gutter; @margin_top; @margin_bottom;  ) when (@edge = true) {
	margin: @margin_top 0 @margin_bottom 0;
}



// ==============================================
// 5.
// Buttons
// ==============================================
//
// Button variants
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons
//
// ----------------------------------------------

.button-variant(@color; @background; @border) {
  color: @color;
  background-color: @background;
  border-color: @border;

  &:hover,
  &:focus,
  &.focus,
  &:active,
  &.active,
  .open > .dropdown-toggle& {
    color: @color;
    background-color: darken(spin(@background, 5%), 3%);
        border-color: darken(spin(@border, 5%), 5%);
  }
  &:active,
  &.active,
  .open > .dropdown-toggle& {
    background-image: none;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &.focus,
    &:active,
    &.active {
      background-color: @background;
          border-color: @border;
    }
  }

  .badge {
    color: @background;
    background-color: @color;
  }
}

// Button sizes
.button-size(@padding-vertical; @padding-horizontal; @font-size; @line-height; @border-radius) {
  padding: @padding-vertical @padding-horizontal;
  font-size: @font-size;
  line-height: @line-height;
  border-radius: @border-radius;
}

.user-select(@user-select) {
  -webkit-touch-callout: @user-select;
  -webkit-user-select: @user-select;
  -khtml-user-select: @user-select;
  -moz-user-select: @user-select;
  -ms-user-select: @user-select;
  user-select: @user-select;
}




// ==============================================
// 6.
// Forms
// ==============================================

// Form validation states
//
// Used in forms.less to generate the form validation CSS for warnings, errors,
// and successes.

.form-control-validation(@text-color: #555; @border-color: #ccc; @background-color: #f5f5f5; @color: @border-color;) {
  // Color the label and help text
  .help-block,
  .control-label,
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline,
  &.radio label,
  &.checkbox label,
  &.radio-inline label,
  &.checkbox-inline label  {
    color: @text-color;
  }
  // Set the border and box shadow on specific inputs to match
  .form-control {
   border-color: @border-color;
   .box-shadow(inset 0 3px 0 0 rgba(0,0,0,0.02)); // Redeclare so transitions work
   
    @color-rgba: rgba(red(@color), green(@color), blue(@color), .6);
	  &:focus {
	    border-color: @border-color;
	    outline: 0;
	    .box-shadow(~"0 0 0 3px @{color-rgba}");
	  }
  }
  // Set validation states also for addons
  .input-group-addon {
    color: @text-color;
    border-color: @border-color;
    background-color: @background-color;
  }
  // Optional feedback icon
  .form-control-feedback {
    color: @text-color;
  }
}


// Form control focus state
//
// Generate a customized focus state and for any input with the specified color,
// which defaults to the `@input-border-focus` variable.
//
// We highly encourage you to not customize the default value, but instead use
// this to tweak colors on an as-needed basis. This aesthetic change is based on
// WebKit's default styles, but applicable to a wider range of browsers. Its
// usability and accessibility should be taken into account with any change.
//
// Example usage: change the default blue border and shadow to white for better
// contrast against a dark gray background.
.form-control-focus(@color: @input-shadow-focus; @border-color-light: @input-border-focus) {
  @color-rgb: rgb(red(@color), green(@color), blue(@color));
  &:focus {
    border-color: @border-color;
    outline: 0;
    .box-shadow(~"0 0 0 3px @{color-rgb}");
  }
}

// Form control sizing
//
// Relative text size, padding, and border-radii changes for form controls. For
// horizontal sizing, wrap controls in the predefined grid classes. `<select>`
// element gets special love because it's special, and that's a fact!
.input-size(@input-height; @padding-vertical; @padding-horizontal; @font-size; @line-height; @border-radius) {
  height: @input-height;
  padding: @padding-vertical @padding-horizontal;
  font-size: @font-size;
  line-height: @line-height;
  border-radius: @border-radius;

  select& {
    height: @input-height;
    line-height: @input-height;
  }

  textarea&,
  select[multiple]& {
    height: auto;
  }
}

// WebKit-style focus

.tab-focus() {
  // Default
  outline: thin dotted;
  // WebKit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}





// ==============================================
// 7.
// Z-Index
// ==============================================
//
// Assign class name to automatically calculate 
// the z-index based on their order
// Usage:
// nav {
// 	.zindex('nav');
// }
// output: nav{z-index:300}
//
// ==============================================

@z-index-order: 
	'upload-module-toolbox', 
	'layout-footer-fixed', 
	'layout-header-fixed', 
	'dropdown', 
	'modal';

.zindex(@elementName) {
	.loop(@elementName, @counter) when (@counter > 0) {
		.loop(@elementName, @counter - 1);
		.pickIndex(@elementName, @counter);
	}
	.loop(@elementName, length(@z-index-order));
	.pickIndex(@elementName, @counter) when (extract(@z-index-order, @counter) = @elementName) {
		z-index: @counter * 1000;
	}
}


// ==============================================
// 8.
// Horizontal dividers
// Dividers (basically an hr) within dropdowns and nav lists
// ==============================================


.nav-divider(@color: #e5e5e5) {
  height: 1px;
  margin: (((@defaultlineheight / 2) - .0625) * @toRems) 0;
  overflow: hidden;
  background-color: @color;
}


// ===============================================
// 9.
// Reset filters for IE
// When you need to remove a gradient background, do not forget to use this to reset
// the IE filter for IE9 and below.
// ===============================================

.reset-filter() {
  filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
}



// ==============================================
// 10.
// Misc helpers and shortcuts
// ==============================================

// Shortcuts --------------------------------

.border-radius(@radius:5px) {
	-webkit-border-radius: @arguments;
	-moz-border-radius: @arguments;
	border-radius: @arguments;
}

.box-sizing(@type) {
	-moz-box-sizing: @type;
	-webkit-box-sizing: @type;
	-ms-box-sizing: @type;
	box-sizing: @type;
}

.box-shadow(@shadow: 1px 1px 2px rgba(0,0,0,0.25)) {
	-webkit-box-shadow: @shadow;
	-moz-box-shadow: @shadow;
	box-shadow: @shadow;
}

.filter(@filter: grayscale(100%)) {
	-webkit-filter: @filter;
	-moz-filter: @filter;
	-ms-filter: @filter;
	-o-filter: @filter;
	filter: @filter;
}

.transition(@transition) {
	-webkit-transition: @transition;
	-moz-transition: @transition;
	transition: @transition;
}
.transform(@string){
	-webkit-transform: @string;
	-moz-transform:    @string;
	-ms-transform:     @string;
	-o-transform:      @string;
}

.translate(@x; @y) {
  -webkit-transform: translate(@x, @y);
      -ms-transform: translate(@x, @y); // IE9 only
       -o-transform: translate(@x, @y);
          transform: translate(@x, @y);
}

.rotate(@rotation) {
	-webkit-transform: rotate(@rotation);
	-moz-transform: rotate(@rotation);
	-o-transform: rotate(@rotation);
	transform: rotate(@rotation);
}

.placeholder(@color: @black) {
	[placeholder] {
		color:   @color;
	   text-overflow: ellipsis;
	   .opacity(1);
	}
	::-webkit-input-placeholder { // WebKit browsers
	    color:   @color;
	    text-overflow: ellipsis;
	}
	:-moz-placeholder { // Mozilla Firefox 4 to 18
	   color:    @color;
	   text-overflow: ellipsis;
	   .opacity(1);
	}
	::-moz-placeholder { // Mozilla Firefox 19+
	   color:    @color;
	   text-overflow: ellipsis;
	   .opacity(1);
	}
	:-ms-input-placeholder { // Internet Explorer 10+
	   color:    @color;
	   text-overflow: ellipsis;
	}
}

// ==============================================
// 11.
// Gradients
// ==============================================

#gradient {
	.horizontal (@start-color, @end-color) when not (@disable-filters) {
		background-color: @end-color;
		background-repeat: repeat-x;
		background-image: -khtml-gradient(linear, left top, right top, from(@start-color), to(@end-color)); /* Konqueror */
		background-image: -moz-linear-gradient(left, @start-color, @end-color); /* FF 3.6+ */
		background-image: -ms-linear-gradient(left, @start-color, @end-color); /* IE10 */
		background-image: -webkit-gradient(linear, left top, right top, color-stop(0%, @start-color), color-stop(100%, @end-color)); /* Safari 4+, Chrome 2+ */
		background-image: -webkit-linear-gradient(left, @start-color, @end-color); /* Safari 5.1+, Chrome 10+ */
		background-image: -o-linear-gradient(left, @start-color, @end-color); /* Opera 11.10 */
		background-image: -ms-linear-gradient(left, @start-color 0%, @end-color 100%);  /* IE10+ */
		background-image: linear-gradient(left, @start-color, @end-color); /* the standard */
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",@start-color,@end-color)); /* IE6 & IE7 */
		-ms-filter: %("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",@start-color,@end-color); /* IE8+ */
	}
	.horizontal (@start-color, @end-color) when (@disable-filters) {
		background-color: @end-color;
		background-repeat: repeat-x;
		background-image: -khtml-gradient(linear, left top, right top, from(@start-color), to(@end-color)); /* Konqueror */
		background-image: -moz-linear-gradient(left, @start-color, @end-color); /* FF 3.6+ */
		background-image: -ms-linear-gradient(left, @start-color, @end-color); /* IE10 */
		background-image: -webkit-gradient(linear, left top, right top, color-stop(0%, @start-color), color-stop(100%, @end-color)); /* Safari 4+, Chrome 2+ */
		background-image: -webkit-linear-gradient(left, @start-color, @end-color); /* Safari 5.1+, Chrome 10+ */
		background-image: -o-linear-gradient(left, @start-color, @end-color); /* Opera 11.10 */
		background-image: -ms-linear-gradient(left, @start-color 0%, @end-color 100%);  /* IE10+ */
		background-image: linear-gradient(left, @start-color, @end-color); /* the standard */
	}
	.vertical (@start-color, @end-color) when (@disable-filters)  {
		background-color: @end-color;
		background-repeat: repeat-x;
		background-image: -khtml-gradient(linear, left top, left bottom, from(@start-color), to(@end-color)); /* Konqueror */
		background-image: -moz-linear-gradient(@start-color, @end-color); /* FF 3.6+ */
		background-image: -ms-linear-gradient(@start-color, @end-color); /* IE10 */
		background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, @start-color), color-stop(100%, @end-color)); /* Safari 4+, Chrome 2+ */
		background-image: -webkit-linear-gradient(@start-color, @end-color); /* Safari 5.1+, Chrome 10+ */
		background-image: -o-linear-gradient(@start-color, @end-color); /* Opera 11.10 */
		background-image: -ms-linear-gradient(top, @start-color 0%, @end-color 100%);  /* IE10+ */
		background-image: linear-gradient(@start-color, @end-color); /* the standard */
	}
	.vertical (@start-color, @end-color) when not (@disable-filters)  {
		background-color: @end-color;
		background-repeat: repeat-x;
		background-image: -khtml-gradient(linear, left top, left bottom, from(@start-color), to(@end-color)); /* Konqueror */
		background-image: -moz-linear-gradient(@start-color, @end-color); /* FF 3.6+ */
		background-image: -ms-linear-gradient(@start-color, @end-color); /* IE10 */
		background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, @start-color), color-stop(100%, @end-color)); /* Safari 4+, Chrome 2+ */
		background-image: -webkit-linear-gradient(@start-color, @end-color); /* Safari 5.1+, Chrome 10+ */
		background-image: -o-linear-gradient(@start-color, @end-color); /* Opera 11.10 */
		background-image: -ms-linear-gradient(top, @start-color 0%, @end-color 100%);  /* IE10+ */
		background-image: linear-gradient(@start-color, @end-color); /* the standard */
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",@start-color,@end-color)); /* IE6 & IE7 */
		-ms-filter: %("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",@start-color,@end-color); /* IE8+ */
	}
}



// ==============================================
// 12.
// Flexbox LESS mixins
// ==============================================
//
// The spec: http://www.w3.org/TR/css3-flexbox
//
// --------------------------------------------------

// Flexbox display
// flex or inline-flex
.flex-display(@display: flex) {
	display: ~"-webkit-@{display}";
	display: ~"-moz-@{display}";
	display: ~"-ms-@{display}box"; // IE10 uses -ms-flexbox
	display: ~"-ms-@{display}"; // IE11
	display: @display;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
.flex(@columns: initial) {
	-webkit-flex: @columns;
		 -moz-flex: @columns;
			-ms-flex: @columns;
					flex: @columns;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
.flex-direction(@direction: row) {
	-webkit-flex-direction: @direction;
		 -moz-flex-direction: @direction;
			-ms-flex-direction: @direction;
					flex-direction: @direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
.flex-wrap(@wrap: nowrap) {
	-webkit-flex-wrap: @wrap;
		 -moz-flex-wrap: @wrap;
			-ms-flex-wrap: @wrap;
					flex-wrap: @wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
.flex-flow(@flow) {
	-webkit-flex-flow: @flow;
		 -moz-flex-flow: @flow;
			-ms-flex-flow: @flow;
					flex-flow: @flow;
}

// Display Order
// - applies to: flex items
// <integer>
.flex-order(@order: 0) {
	-webkit-order: @order;
		 -moz-order: @order;
			-ms-order: @order;
					order: @order;
}

// Flex grow factor
// - applies to: flex items
// <number>
.flex-grow(@grow: 0) {
	-webkit-flex-grow: @grow;
		 -moz-flex-grow: @grow;
			-ms-flex-grow: @grow;
					flex-grow: @grow;
}

// Flex shr
// - applies to: flex itemsink factor
// <number>
.flex-shrink(@shrink: 1) {
	-webkit-flex-shrink: @shrink;
		 -moz-flex-shrink: @shrink;
			-ms-flex-shrink: @shrink;
					flex-shrink: @shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
.flex-basis(@width: auto) {
	-webkit-flex-basis: @width;
		 -moz-flex-basis: @width;
			-ms-flex-basis: @width;
					flex-basis: @width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
.justify-content(@justify: flex-start) {
	-webkit-justify-content: @justify;
		 -moz-justify-content: @justify;
			-ms-justify-content: @justify;
					justify-content: @justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
.align-content(@align: stretch) {
	-webkit-align-content: @align;
		 -moz-align-content: @align;
			-ms-align-content: @align;
					align-content: @align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
.align-items(@align: stretch) {
	-webkit-align-items: @align;
		 -moz-align-items: @align;
			-ms-align-items: @align;
					align-items: @align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
.align-self(@align: auto) {
	-webkit-align-self: @align;
		 -moz-align-self: @align;
			-ms-align-self: @align;
					align-self: @align;
}


// ==============================================
// 13.
// Alerts
// ==============================================

.alert-variant(@background; @border; @text-color) {
  background-color: @background;
  border-color: @border;
  color: @text-color;

  hr {
    border-top-color: @border;
  }
  .alert-link {
    color: darken(spin(@text-color, 5%), 5%);
  }
}



// ==============================================
// 14.
// Helpers
// ==============================================


.clearfix() when not (@using-ieclasses) {
	&:before,
	&:after {
			content: "";
			display: table;
	}
	&:after {
			clear: both;
	}
	*zoom: 1;
}

.clearfix() when (@using-ieclasses) {
	&:before,
	&:after {
			content: "";
			display: table;
	}
	&:after {
			clear: both;
	}
	.ie6 &, .ie7 & {
		zoom: 1;
	}
}

.inline-block() when (@using-ieclasses) {
	display: inline-block;
	.ie7 & {
		display: inline;
		zoom: 1;
	}
}

.inline-block() when not (@using-ieclasses) {
	display: inline-block;
	*display: inline;
	*zoom: 1;
}

.ir() {
	border: 0;
	font: 0/0 a;
	text-shadow: none;
	color: transparent;
	background-color: transparent;
}

.hidden() {
	display: none !important;
	visibility: hidden;
}

.visible() {
	display: block !important;
  	visibility: visible;
}

.visually-hidden() {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	&.focusable:active,
	&.focusable:focus {
			clip: auto;
			height: auto;
			margin: 0;
			overflow: visible;
			position: static;
			width: auto;
	}
}

// Center-align a block level element

.center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.text-hide() {
  font: ~"0/0" a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

// Text overflow
// Requires inline-block or block for proper styling

.text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.square(@value) {
	width: @value * @toRems;
	height: @value * @toRems;
}

.size(@width, @height) {
	width: @width * @toRems;
	height: @height * @toRems;
}

// Opacity

.opacity(@opacity) {
  opacity: @opacity;
  // IE8 filter
  @opacity-ie: (@opacity * 100);
  filter: ~"alpha(opacity=@{opacity-ie})";
}


// Responsive image
//
// Keep images from scaling beyond the width of their parents.
.img-responsive(@display: block) {
  display: @display;
  max-width: 100%; // Part 1: Set a maximum relative to the parent
  height: auto; 	 // Part 2: Scale the height according to the width, otherwise you get stretching
}
